/*
 * The methods, properties, etc. for this, and the most populous
 * class are almost identical. The config key can be a string: config.components[populous/density]
 * making createTables and other functions using the config identifier cane be abstracted
 * the getJSON function also has an alteration which could be achieved by passing a string
 * to the 'populous' or 'density' api call. In summary, these two objects are primed
 * for the creation of an abstract superclass.
 *
 * to do: time permitting - create abstract super class for density and populous
 * controllers - could lead to abstract super class for all controllers a 'PopClockViewController'
 * if you will.
 *
 */
function HighestDensityViewController(api, highestDensityContainerID, $header)
{
	var $controller = this;
	this.api = api;
	this.highestDensityContainerID = highestDensityContainerID;
	this.$header = $header; // Expecting jQuery
	this.jQueryEquivalent = $('#' + this.highestDensityContainerID);
	
	// Init
	this.prependString = '#density-';
	this.table = null;
}
	HighestDensityViewController.prototype = {
		createTables: function()
		{
			var controller    = this;
			var creatingTables = $.Deferred();
			var gettingJSON    = this.getJSON();
			gettingJSON.done(function( data ) {
				// primary uses config for tabs, titles, etc.
				// uses data to generate rows
				var tables = [
					{ 
						title: config.components.density.tables[0].title,
						columns: [
							config.components.density.tables[0].columns[0],
							config.components.density.tables[0].columns[1] + ', ' + config.components.density.tables[0].vintage,
							config.components.density.tables[0].columns[2] + ', ' + config.components.density.tables[0].vintage
						],
						rows: controller.prepareRows(data.states),
						summary: config.components.density.tables[0].table_summary
					},
					{
						title: config.components.density.tables[1].title,
						columns: [
							config.components.density.tables[1].columns[0],
							config.components.density.tables[1].columns[1] + ', ' + config.components.density.tables[1].vintage,
							config.components.density.tables[1].columns[2] + ', ' + config.components.density.tables[1].vintage
						],
						rows: controller.prepareRows(data.counties),
						summary: config.components.density.tables[1].table_summary
					},
					{
						title: config.components.density.tables[2].title,
						columns: [
							config.components.density.tables[2].columns[0],
							config.components.density.tables[2].columns[1] + ', ' + config.components.density.tables[2].vintage,
							config.components.density.tables[2].columns[2] + ', ' + config.components.density.tables[2].vintage
						],
						rows: controller.prepareRows(data.cities),
						summary: config.components.density.tables[2].table_summary
						
					}
				];
	
				controller.table = new TabbedTable('#' + controller.highestDensityContainerID, controller.prependString);
				controller.table.render(tables);
				controller.table.enable();
				
				creatingTables.resolve();
			});
			
			return creatingTables;
		},
		
		prepareRows: function ( data )
		{
			var rows = [];
			$.each(data, function ( index, row ) {
				
				rows[index] = [
					'<a href="' + row.quickfacts + '">' + row.name + '</a>',
					addCommas(row.population),
					addCommas(row.density, '1')
				];
				
			});
			
			return rows;
		},
		
		getJSON: function ()
		{
			var controller = this;
			return this.api.get('density', {}, function( data, textStatus, jqXHR, promise) {
				promise.resolve(data);
			});
		},
		
		getCSV: function()
		{
			var controller  = this;
			var creatingCSV = $.Deferred();
			var gettingJSON = this.getJSON();
			gettingJSON.done( function( data ) {
				//var csv = [];
				var csv = [];
				
				// state
				csv.push(
						populous_density_csv_table(
								config.components.density.tables[0].title,
								[
									config.components.density.tables[0].columns[0],
									config.components.density.tables[0].columns[1] + ', ' + config.components.density.tables[0].vintage,
									config.components.density.tables[0].columns[2] + ', ' + config.components.density.tables[0].vintage
								],
								data.states
						)
				);
				
				// county
				csv.push(
						populous_density_csv_table(
								config.components.density.tables[1].title,
								[
									config.components.density.tables[1].columns[0],
									config.components.density.tables[1].columns[1] + ', ' + config.components.density.tables[1].vintage,
									config.components.density.tables[1].columns[2] + ', ' + config.components.density.tables[1].vintage
								],
								data.counties
						)
				);
				
				// city
				csv.push(
						populous_density_csv_table(
								config.components.density.tables[2].title,
								[
									config.components.density.tables[2].columns[0],
									config.components.density.tables[2].columns[1] + ', ' + config.components.density.tables[2].vintage,
									config.components.density.tables[2].columns[2] + ', ' + config.components.density.tables[2].vintage
								],
								data.cities
						)
				);
				
				creatingCSV.resolve(csv);
			});
			return creatingCSV;
		}
	};